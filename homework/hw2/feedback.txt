Git Commit: 0ae28c6e8bfe50957a32057b93690d4c23f800dd

Make sure that you're checking for errors when using fopen, and throughout your program. 
Also, make sure that the amount of code in your main() is not too big, and that you're 
creating helper functions where appropriate. 

2 Valgrind Errors in rot13

==5589== Memcheck, a memory error detector
==5589== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5589== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5589== Command: ./rot13
==5589== 
==5589== Syscall param open(filename) points to unaddressable byte(s)
==5589==    at 0x4F31040: __open_nocancel (syscall-template.S:84)
==5589==    by 0x4EB3ACD: _IO_file_open (fileops.c:221)
==5589==    by 0x4EB3D34: _IO_file_fopen@@GLIBC_2.2.5 (fileops.c:328)
==5589==    by 0x4EA7D33: __fopen_internal (iofopen.c:86)
==5589==    by 0x40066F: main (in /home/johnh/class/hw2/rot13/rot13)
==5589==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5589== 
==5589== Invalid read of size 4
==5589==    at 0x4EB0031: getc (getc.c:37)
==5589==    by 0x4006E0: main (in /home/johnh/class/hw2/rot13/rot13)
==5589==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5589== 
==5589== 
==5589== Process terminating with default action of signal 11 (SIGSEGV)
==5589==  Access not within mapped region at address 0x0
==5589==    at 0x4EB0031: getc (getc.c:37)
==5589==    by 0x4006E0: main (in /home/johnh/class/hw2/rot13/rot13)
==5589==  If you believe this happened as a result of a stack
==5589==  overflow in your program's main thread (unlikely but
==5589==  possible), you can try to increase the size of the
==5589==  main thread stack using the --main-stacksize= flag.
==5589==  The main thread stack size used in this run was 8388608.
==5589== 
==5589== FILE DESCRIPTORS: 3 open at exit.
==5589== Open file descriptor 2: /dev/pts/33
==5589==    <inherited from parent>
==5589== 
==5589== Open file descriptor 1: /dev/pts/33
==5589==    <inherited from parent>
==5589== 
==5589== Open file descriptor 0: /dev/pts/33
==5589==    <inherited from parent>
==5589== 
==5589== 
==5589== HEAP SUMMARY:
==5589==     in use at exit: 0 bytes in 0 blocks
==5589==   total heap usage: 1 allocs, 1 frees, 552 bytes allocated
==5589== 
==5589== All heap blocks were freed -- no leaks are possible
==5589== 
==5589== For counts of detected and suppressed errors, rerun with: -v
==5589== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


2 Valgrind errors in Histogram...

m
==5657== Memcheck, a memory error detector
==5657== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5657== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5657== Command: ./histogram
==5657== 
==5657== Syscall param open(filename) points to unaddressable byte(s)
==5657==    at 0x4F31040: __open_nocancel (syscall-template.S:84)
==5657==    by 0x4EB3ACD: _IO_file_open (fileops.c:221)
==5657==    by 0x4EB3D34: _IO_file_fopen@@GLIBC_2.2.5 (fileops.c:328)
==5657==    by 0x4EA7D33: __fopen_internal (iofopen.c:86)
==5657==    by 0x40078F: main (in /home/johnh/class/hw2/histogram/histogram)
==5657==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5657== 
==5657== Invalid read of size 4
==5657==    at 0x4EB0031: getc (getc.c:37)
==5657==    by 0x40083B: main (in /home/johnh/class/hw2/histogram/histogram)
==5657==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5657== 
==5657== 
==5657== Process terminating with default action of signal 11 (SIGSEGV)
==5657==  Access not within mapped region at address 0x0
==5657==    at 0x4EB0031: getc (getc.c:37)
==5657==    by 0x40083B: main (in /home/johnh/class/hw2/histogram/histogram)
==5657==  If you believe this happened as a result of a stack
==5657==  overflow in your program's main thread (unlikely but
==5657==  possible), you can try to increase the size of the
==5657==  main thread stack using the --main-stacksize= flag.
==5657==  The main thread stack size used in this run was 8388608.
==5657== 
==5657== FILE DESCRIPTORS: 3 open at exit.
==5657== Open file descriptor 2: /dev/pts/33
==5657==    <inherited from parent>
==5657== 
==5657== Open file descriptor 1: /dev/pts/33
==5657==    <inherited from parent>
==5657== 
==5657== Open file descriptor 0: /dev/pts/33
==5657==    <inherited from parent>
==5657== 
==5657== 
==5657== HEAP SUMMARY:
==5657==     in use at exit: 0 bytes in 0 blocks
==5657==   total heap usage: 1 allocs, 1 frees, 552 bytes allocated
==5657== 
==5657== All heap blocks were freed -- no leaks are possible
==5657== 
==5657== For counts of detected and suppressed errors, rerun with: -v
==5657== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault



Warning when using Makefile in scramble. 

./scramble histogram-in.txt > scramble-out.txt
There was a problem opening the file: : No such file or directory
Makefile:16: recipe for target 'scramble-out.txt' failed
make: *** [scramble-out.txt] Error 1

1 Valgrind error in Scramble. 

==6054== Memcheck, a memory error detector
==6054== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==6054== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==6054== Command: ./scramble
==6054== 
==6054== Syscall param open(filename) points to unaddressable byte(s)
==6054==    at 0x4F31040: __open_nocancel (syscall-template.S:84)
==6054==    by 0x4EB3ACD: _IO_file_open (fileops.c:221)
==6054==    by 0x4EB3D34: _IO_file_fopen@@GLIBC_2.2.5 (fileops.c:328)
==6054==    by 0x4EA7D33: __fopen_internal (iofopen.c:86)
==6054==    by 0x400950: main (in /home/johnh/class/hw2/scramble/scramble)
==6054==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6054== 
There was a problem opening the file: : Bad address
==6054== 
==6054== FILE DESCRIPTORS: 3 open at exit.
==6054== Open file descriptor 2: /dev/pts/33
==6054==    <inherited from parent>
==6054== 
==6054== Open file descriptor 1: /dev/pts/33
==6054==    <inherited from parent>
==6054== 
==6054== Open file descriptor 0: /dev/pts/33
==6054==    <inherited from parent>
==6054== 
==6054== 
==6054== HEAP SUMMARY:
==6054==     in use at exit: 0 bytes in 0 blocks
==6054==   total heap usage: 3 allocs, 3 frees, 2,128 bytes allocated
==6054== 
==6054== All heap blocks were freed -- no leaks are possible
==6054== 
==6054== For counts of detected and suppressed errors, rerun with: -v
==6054== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)



